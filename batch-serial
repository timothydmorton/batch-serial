#!/usr/bin/env python

"""
Launches batch job running every line of input file.

Uses slurm job array by default, but could be reconfigured
to another batch scheduler if desired.

"""
from __future__ import print_function, division

import os,re,sys,os.path,shutil,glob
import argparse
import numpy as np
import subprocess
from distutils.spawn import find_executable

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Fire up a batch serial job')

    parser.add_argument('file', type=str)
    parser.add_argument('command', type=str, nargs='?', default=None, 
                        help='Optional argument, to specify command to ' +
                        'apply to each line of file')
    parser.add_argument('-n', '--nsplit', type=int, default=None,
                        help='Total number of jobs to split into.  ' +
                        'Will default to length of file.')
    parser.add_argument('--ntasks_per_node', type=int, default=1,
                        help='number of cores to use per node.')
    
    parser.add_argument('-t', '--time', type=float, default=5,
                        help='approximate time that one line will take, '+
                        'in minutes')
    
    parser.add_argument('--test', action='store_true',
                        help='If set, then just write batch script, not run')

    parser.add_argument('--email', type=str, default=None,
                        help='email address to message when job starts/stops')

    parser.add_argument('--qsched', type=str, default='slurm')
    parser.add_argument('--condor', action='store_true')
    parser.add_argument('--sge', action='store_true')

    parser.add_argument('args', nargs=argparse.REMAINDER)

    args = parser.parse_args()
    
    if args.condor:
        args.qsched = 'condor'
    if args.sge:
        args.qsched = 'sge'

    listfile = os.path.abspath(args.file)

    num_lines = sum(1 for line in open(listfile))
    nsplit = num_lines if args.nsplit is None else args.nsplit

    n_nodes = nsplit // (args.ntasks_per_node)
    if nsplit % args.ntasks_per_node != 0:
        n_nodes += 1
    
    if nsplit < args.ntasks_per_node:
        ntasks_per_node = nsplit
    else:
        ntasks_per_node = args.ntasks_per_node

    num_per_job = num_lines // nsplit
    if num_lines % nsplit != 0:
        num_per_job += 1
    tot_minutes = args.time*num_per_job
    if tot_minutes < 65:
        tot_minutes = 65
    time_string = '{:02.0f}:{:02.0f}:00'.format(tot_minutes//60, tot_minutes % 60)

    scriptfile = '{}.{}'.format(listfile, args.qsched)
    fout = open(scriptfile, 'w')

    if args.qsched == 'slurm':
            
        fout.write('#!/bin/bash\n')
        if args.command is not None:
            name = '{}-{}\n'.format(args.command,args.file)
        else:
            name = args.file
        fout.write('#SBATCH -J {}\n'.format(name))
        fout.write('#SBATCH -N 1\n'.format(n_nodes))
        fout.write('#SBATCH --ntasks-per-node=1\n'.format(ntasks_per_node))
        fout.write('#SBATCH -t {}\n'.format(time_string))
        fout.write('\n')
        #fout.write('sed -n ${{SLURM_ARRAY_TASK_ID}}p {} | '.format(listfile))
        fout.write('awk "NR % {} == $(expr ${{SLURM_ARRAY_TASK_ID}} - 1)" {} | '.format(nsplit,listfile))
        if args.command is not None:
            fout.write('xargs {} '.format(args.command))
            for arg in args.args:
                fout.write('{} '.format(arg))
            fout.write('\n')
        else:
            fout.write('bash\n')

        fout.close()
        if nsplit <= 1000:
            cmd = 'sbatch --array=1-{} {}'.format(nsplit, scriptfile)
        else:
            ilo = 1
            ihi = 1000
            cmd = 'sbatch --array=1-1000 {}; '.format(scriptfile)
            while ihi < nsplit:
                ilo += 1000
                ihi = min(ilo+999, nsplit)
                cmd += 'sbatch --array={}-{} {}; '.format(ilo,
                                                          ihi, 
                                                          scriptfile)
        if not args.test:
            #execute slurm batch job
            subprocess.call(cmd, shell=True)
        else:
            print(cmd)

    elif args.qsched == 'sge':
        
        fout.write('#!/bin/bash\n')
        if args.command is not None:
            name = '{}-{}\n'.format(args.command,args.file)
        else:
            name = args.file
        fout.write('#$ -N {}\n'.format(name))
        fout.write('#$ -l h rt={}\n'.format(time_string))
        fout.write('#$ -t 1-{}'.format(nsplit))
        fout.write('\n')
        #fout.write('sed -n ${{SLURM_ARRAY_TASK_ID}}p {} | '.format(listfile))
        fout.write('awk "NR % {} == $(expr ${{SGE_TASK_ID}} - 1)" {} | '.format(nsplit,listfile))
        if args.command is not None:
            fout.write('xargs {} '.format(args.command))
            for arg in args.args:
                fout.write('{} '.format(arg))
            fout.write('\n')
        else:
            fout.write('bash\n')

        fout.close()
        cmd = 'qsub {}'.format(scriptfile)
        if not args.test:
            #execute SGE batch job
            subprocess.call(cmd, shell=True)
        else:
            print(cmd)

    elif args.qsched == 'condor':
        if args.command is None:
            raise ValueError('Must have command if launching condor script')

        runfolder = os.path.abspath('{}-condor'.format(listfile))
        if os.path.exists(runfolder):
            shutil.rmtree(runfolder)
        os.makedirs(runfolder)
        
        all_list = np.loadtxt(listfile, dtype=str)
        for i in range(num_lines):
            os.symlink(os.path.abspath(all_list[i]), 
                       os.path.join(runfolder,'obj.{}'.format(i)))
                                  

        fout.write('universe = vanilla\n')
        fout.write('executable = {}\n'.format(find_executable(args.command)))
        if len(args.args ) > 0:
             fout.write('arguments = ')
             for arg in args.args:
                 fout.write('{} '.format(arg))
             fout.write('\n')
        fout.write('getenv = True\n')
        fout.write('output = job_output\n')
        fout.write('error = job_error\n')
        fout.write('log = job_log\n')
        fout.write('initialdir = {}\n'.format(os.path.join(runfolder,
                                                         'obj.$(Process)')))
        #fout.write('requirements = OpSysMajorVersion == 6\n')
        fout.write('requirements = OpSysAndVer != "CentOS5"\n')
        fout.write('queue {}\n'.format(num_lines))
        
        fout.close()

        if not args.test:
            subprocess.call('condor_submit {}'.format(scriptfile), shell=True)




